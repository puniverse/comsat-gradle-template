buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.0.3'
    }
}

apply plugin: 'java'

apply from: 'gradle/props.gradle'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

configurations {
    provided
}

sourceSets {
    main.compileClasspath = main.compileClasspath + configurations.provided
    test.compileClasspath = test.compileClasspath + configurations.provided
    test.runtimeClasspath = test.runtimeClasspath + configurations.provided
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
        force "com.google.guava:guava:$guavaVer"

        force "com.fasterxml.jackson.core:jackson-core:$jacksonVer"
        force "com.fasterxml.jackson.core:jackson-databind:$jacksonVer"
        force "com.fasterxml.jackson.core:jackson-annotations:$jacksonVer"
        force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:$jacksonVer"
        force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVer"

        force "org.glassfish.jersey.core:jersey-common:$jerseyVer"
        force "org.glassfish.jersey.core:jersey-server:$jerseyVer"
        force "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVer"

        force "org.slf4j:slf4j-api:$slf4jVer"
        force "xml-apis:xml-apis:$xmlAPIsVer"
    }
}

repositories {
//    mavenLocal()
    mavenCentral()
//    maven { url "https://oss.sonatype.org/content/repositories/releases" }
//    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
//    maven { url 'https://maven.java.net/content/repositories/snapshots' }
}

test {
    beforeTest { desc ->
        logger.quiet("Running test: " + desc)
    }

    afterTest { desc, result ->
        if(result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
            if(result.exception != null) {
                result.exception.printStackTrace()
            }
        }
    }
}

dependencies {
    compile "com.h2database:h2:$h2Ver"
    compile "org.glassfish.jersey.core:jersey-server:$jerseyVer"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVer"
    compile "com.netflix.feign:feign-core:$feignVer"
    compile "org.apache.httpcomponents:httpclient:$httpClientVer"
    compile ("com.netflix.feign:feign-jaxrs:$feignVer") {
        exclude group: 'javax.ws.rs', module: 'jsr311-api'
    }
    compile ("com.netflix.feign:feign-jackson:$feignVer") {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVer"
    compile "io.dropwizard:dropwizard-core:$dropwizardVer"
    compile "io.dropwizard:dropwizard-jdbi:$dropwizardVer"

    provided "javax.servlet:javax.servlet-api:$servletVer"

    runtime fileTree(dir: 'lib', include: '*.jar')

    testCompile "junit:junit:$junitVer"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

defaultTasks 'compile'

if (project.hasProperty('env')) {
    apply from: "gradle/${project.getProperty('env')}.gradle"
} else {
    apply from: "gradle/tomcat8.gradle"
}
